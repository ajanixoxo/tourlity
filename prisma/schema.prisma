generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  avatar             String?
  role               UserRole
  status             UserStatus          @default(PENDING)
  emailVerified      Boolean             @default(false)
  emailVerifiedAt    DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  adminProfile       AdminProfile?
  bookings           Booking[]           @relation("GuestBookings")
  facilitatorProfile FacilitatorProfile?
  hostProfile        HostProfile?
  receivedMessages   Message[]           @relation("ReceiverMessages")
  messages           Message[]           @relation("SenderMessages")
  notifications      Notification[]
  receivedReviews    Review[]            @relation("ReviewedUser")
  reviews            Review[]            @relation("UserReviews")
  tours              Tour[]              @relation("HostTours")
  translatorProfile  TranslatorProfile?
  Payout             Payout[]
  Wallet             Wallet[]
  paymentsReceived   Payment[]           @relation("PaymentHost")
  paymentsMade   Payment[] // Payments where the user is the payer (Guest)

  @@map("users")
}

model HostProfile {
  id               String           @id @default(cuid())
  userId           String           @unique
  bio              String?
  location         String?
  languages        String[]
  specialties      String[]
  subscriptionTier SubscriptionTier @default(BASIC)
  verified         Boolean          @default(false)
  responseTime     String?
  rating           Float            @default(0)
  reviewCount      Int              @default(0)
  totalEarnings    Float            @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  certificationUrl String?
  hotelImageUrl    String?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("host_profiles")
}

model FacilitatorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  location         String?
  languages        String[]
  specialties      String[]
  certification    String?
  rating           Float    @default(0)
  reviewCount      Int      @default(0)
  totalEarnings    Float    @default(0)
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  certificationUrl String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("facilitator_profiles")
}

model TranslatorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  location         String?
  sourceLanguages  String[]
  targetLanguages  String[]
  certification    String?
  rating           Float    @default(0)
  reviewCount      Int      @default(0)
  totalEarnings    Float    @default(0)
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  certificationUrl String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("translator_profiles")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String[]
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Tour {
  id                   String              @id @default(cuid())
  hostId               String
  title                String
  description          String
  type                 TourType
  status               TourStatus          @default(DRAFT)
  price                Float
  originalPrice        Float?
  location             String
  country              String
  duration             String
  groupSize            String
  languages            String[]
  categories           String[]
  images               String[]
  isLive               Boolean             @default(false)
  isFeatured           Boolean             @default(false)
  maxVirtualSlots      Int                 @default(20)
  currentVirtualSlots  Int                 @default(0)
  maxInPersonSlots     Int?
  currentInPersonSlots Int                 @default(0)
  rating               Float               @default(0)
  reviewCount          Int                 @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  bookings             Booking[]
  reviews              Review[]
  tourRequests         TourRequest[]
  host                 User                @relation("HostTours", fields: [hostId], references: [id], onDelete: Cascade)
  WalletTransaction    WalletTransaction[]
  Payment              Payment[]

  @@map("tours")
}

model Booking {
  id              String        @id @default(cuid())
  tourId          String
  guestId         String
  status          BookingStatus @default(PENDING)
  amount          Float
  currency        String        @default("USD")
  paymentStatus   String        @default("PENDING")
  paymentMethod   String?
  scheduledDate   DateTime
  participants    Int           @default(1)
  specialRequests String?
  facilitatorId   String?
  translatorId    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  guest           User          @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  tour            Tour          @relation(fields: [tourId], references: [id], onDelete: Cascade)
  Payment         Payment[]

  @@map("bookings")
}

model TourRequest {
  id              String    @id @default(cuid())
  guestId         String
  title           String
  description     String
  preferredDate   DateTime?
  budget          Float?
  location        String?
  categories      String[]
  languages       String[]
  groupSize       Int?
  specialRequests String?
  status          String    @default("OPEN")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tourId          String?
  tour            Tour?     @relation(fields: [tourId], references: [id])

  @@map("tour_requests")
}

model Review {
  id             String   @id @default(cuid())
  tourId         String
  reviewerId     String
  reviewedUserId String
  rating         Int
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviewedUser   User     @relation("ReviewedUser", fields: [reviewedUserId], references: [id], onDelete: Cascade)
  reviewer       User     @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  tour           Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, reviewerId])
  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  otp       String   @unique

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId       String?
  booking         Booking? @relation(fields: [bookingId], references: [id])
  amount          Float
  currency        String   @default("USD")
  paymentIntentId String?
  paymentMethod   String?  // e.g., card, wallet
  status          String   @default("PENDING")
  receiptUrl      String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Tour Tour[]

  User User[] @relation("PaymentHost")
}


model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance   Float    @default(0)
  escrow    Float    @default(0) // funds held until tour completion
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions WalletTransaction[]
  payouts      Payout[]
}


model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type        String   // DEPOSIT | EARNING | WITHDRAWAL | ESCROW_RELEASE | REFUND
  amount      Float
  currency    String   @default("USD")
  status      String   @default("COMPLETED")
  reference   String?  // Stripe payment/payout ID
  relatedTour String?  // optional: link to tour
  description String?
  createdAt   DateTime @default(now())

  Tour Tour[]
}


model Payout {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId       String
  wallet         Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  amount         Float
  currency       String   @default("USD")
  stripePayoutId String?
  status         String   @default("PENDING") // pending, processing, completed, failed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PlatformTransaction {
  id          String   @id @default(cuid())
  type        String   // e.g., "TOUR_PAYMENT", "PAYOUT", "REFUND"
  amount      Float
  currency    String   @default("USD")
  stripeRef   String?  // Stripe charge/payout ID
  relatedUser String?  // optional userId
  relatedTour String?  // optional tourId
  description String?
  createdAt   DateTime @default(now())
}


enum UserRole {
  GUEST
  HOST
  FACILITATOR
  TRANSLATOR
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum TourType {
  PHYSICAL
  VIRTUAL
}

enum TourStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  ENTERPRISE
}
