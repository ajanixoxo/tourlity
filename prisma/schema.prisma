// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  HOST
  FACILITATOR
  TRANSLATOR
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum TourType {
  PHYSICAL
  VIRTUAL
}

enum TourStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  ENTERPRISE
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  role          UserRole
  status        UserStatus  @default(PENDING)
  emailVerified Boolean     @default(false)
  emailVerifiedAt DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Role-specific fields
  hostProfile     HostProfile?
  facilitatorProfile FacilitatorProfile?
  translatorProfile TranslatorProfile?
  adminProfile    AdminProfile?

  // Relations
  tours          Tour[]      @relation("HostTours")
  bookings       Booking[]   @relation("GuestBookings")
  reviews        Review[]    @relation("UserReviews")
  receivedReviews Review[]   @relation("ReviewedUser")
  messages       Message[]   @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  notifications  Notification[]

  @@map("users")
}

model HostProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  location        String?
  languages       String[]
  specialties     String[]
  subscriptionTier SubscriptionTier @default(BASIC)
  verified        Boolean   @default(false)
  responseTime    String?
  rating          Float     @default(0)
  reviewCount     Int       @default(0)
  totalEarnings   Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  certificationUrl String?
  hotelImageUrl    String?

  @@map("host_profiles")
}

model FacilitatorProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  location        String?
  languages       String[]
  specialties     String[]
  certification   String?   // URL to certification document
  rating          Float     @default(0)
  reviewCount     Int       @default(0)
  totalEarnings   Float     @default(0)
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  certificationUrl String?

  @@map("facilitator_profiles")
}

model TranslatorProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  location        String?
  sourceLanguages String[]
  targetLanguages String[]
  certification   String?   // URL to certification document
  rating          Float     @default(0)
  reviewCount     Int       @default(0)
  totalEarnings   Float     @default(0)
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  certificationUrl String?


  @@map("translator_profiles")
}

model AdminProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions     String[]  // Array of permission strings
  department      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("admin_profiles")
}

model Tour {
  id              String      @id @default(cuid())
  hostId          String
  host            User        @relation("HostTours", fields: [hostId], references: [id], onDelete: Cascade)
  title           String
  description     String
  type            TourType
  status          TourStatus  @default(DRAFT)
  price           Float
  originalPrice   Float?
  location        String
  country         String
  duration        String      // e.g., "2 hours", "1 day"
  groupSize       String      // e.g., "1-5 people", "Unlimited"
  languages       String[]
  categories      String[]
  images          String[]    // Array of image URLs
  isLive          Boolean     @default(false)
  isFeatured      Boolean     @default(false)
  maxVirtualSlots Int         @default(20)
  currentVirtualSlots Int     @default(0)
  maxInPersonSlots Int?       // null for unlimited
  currentInPersonSlots Int    @default(0)
  rating          Float       @default(0)
  reviewCount     Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  bookings        Booking[]
  reviews         Review[]
  tourRequests    TourRequest[]

  @@map("tours")
}

model Booking {
  id              String        @id @default(cuid())
  tourId          String
  tour            Tour          @relation(fields: [tourId], references: [id], onDelete: Cascade)
  guestId         String
  guest           User          @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  status          BookingStatus @default(PENDING)
  amount          Float
  currency        String        @default("USD")
  paymentStatus   String        @default("PENDING")
  paymentMethod   String?
  scheduledDate   DateTime
  participants    Int           @default(1)
  specialRequests String?
  facilitatorId   String?
  translatorId    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("bookings")
}

model TourRequest {
  id              String    @id @default(cuid())
  guestId         String
  title           String
  description     String
  preferredDate   DateTime?
  budget          Float?
  location        String?
  categories      String[]
  languages       String[]
  groupSize       Int?
  specialRequests String?
  status          String    @default("OPEN") // OPEN, MATCHED, CLOSED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tourId          String?
  tour            Tour?     @relation(fields: [tourId], references: [id])

  @@map("tour_requests")
}

model Review {
  id              String    @id @default(cuid())
  tourId          String
  tour            Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)
  reviewerId      String
  reviewer        User      @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewedUserId  String
  reviewedUser    User      @relation("ReviewedUser", fields: [reviewedUserId], references: [id], onDelete: Cascade)
  rating          Int       // 1-5 stars
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([tourId, reviewerId])

  @@map("reviews")
}

model Message {
  id              String    @id @default(cuid())
  senderId        String
  sender          User      @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId      String
  receiver        User      @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())

  @@map("messages")
}

model Notification {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  message         String
  type            String    // BOOKING, APPROVAL, MESSAGE, etc.
  isRead          Boolean   @default(false)
  data            Json?     // Additional data as JSON
  createdAt       DateTime  @default(now())

  @@map("notifications")
}

model EmailVerification {
  id              String    @id @default(cuid())
  email           String
  otp             String    @unique
  expires         DateTime
  attempts        Int       @default(0)
  createdAt       DateTime  @default(now())

  @@map("email_verifications")
}

model PasswordReset {
  id              String    @id @default(cuid())
  email           String
  token           String    @unique
  expires         DateTime
  createdAt       DateTime  @default(now())

  @@map("password_resets")
} 