generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  avatar             String?
  role               UserRole
  status             UserStatus          @default(PENDING)
  emailVerified      Boolean             @default(false)
  emailVerifiedAt    DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  paymentsMade       Payment[]
  Payout             Payout[]
  Wallet             Wallet?
  adminProfile       AdminProfile?
  bookings           Booking[]           @relation("GuestBookings")
  facilitatorProfile FacilitatorProfile?
  hostProfile        HostProfile?
  receivedMessages   Message[]           @relation("ReceiverMessages")
  messages           Message[]           @relation("SenderMessages")
  notifications      Notification[]
  receivedReviews    Review[]            @relation("ReviewedUser")
  reviews            Review[]            @relation("UserReviews")
  tours              Tour[]              @relation("HostTours")
  translatorProfile  TranslatorProfile?
  paymentsReceived   Payment[]           @relation("PaymentHost")
  customTours        CustomTour[]        @relation("CustomTourGuest")
  customTourResponses CustomTourHostResponse[] @relation("CustomTourHostResponses")

  @@map("users")
}

model HostProfile {
  id               String           @id @default(cuid())
  userId           String           @unique
  bio              String?
  location         String?
  languages        String[]
  specialties      String[]
  subscriptionTier SubscriptionTier @default(BASIC)
  verified         Boolean          @default(false)
  responseTime     String?
  rating           Float            @default(0)
  reviewCount      Int              @default(0)
  totalEarnings    Float            @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  certificationUrl String?
  hotelImageUrl    String?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("host_profiles")
}

model FacilitatorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  location         String?
  languages        String[]
  specialties      String[]
  certification    String?
  rating           Float    @default(0)
  reviewCount      Int      @default(0)
  totalEarnings    Float    @default(0)
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  certificationUrl String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("facilitator_profiles")
}

model TranslatorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  location         String?
  sourceLanguages  String[]
  targetLanguages  String[]
  certification    String?
  rating           Float    @default(0)
  reviewCount      Int      @default(0)
  totalEarnings    Float    @default(0)
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  certificationUrl String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("translator_profiles")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String[]
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Tour {
  id                      String                    @id @default(cuid())
  hostId                  String
  title                   String
  description             String
  type                    TourType
  status                  TourStatus                @default(PENDING_APPROVAL)
  price                   Float
  originalPrice           Float?
  location                String
  country                 String?
  duration                String
  groupSize               String?
  languages               String[]
  categories              String[]
  images                  String[]
  isLive                  Boolean                   @default(false)
  isFeatured              Boolean                   @default(false)
  maxVirtualSlots         Int                       @default(20)
  currentVirtualSlots     Int                       @default(0)
  maxInPersonSlots        Int?
  currentInPersonSlots    Int                       @default(0)
  rating                  Float                     @default(0)
  reviewCount             Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  TourToWalletTransaction TourToWalletTransaction[]
  bookings                Booking[]
  reviews                 Review[]
  tourRequests            TourRequest[]
  host                    User                      @relation("HostTours", fields: [hostId], references: [id], onDelete: Cascade)
  Payment                 Payment[]                 @relation("PaymentToTour")
  startDate               DateTime?              // Tour start date
  endDate                 DateTime?              // Tour end date
  coverageAreas           String[]               // Where tour takes place (JSON array)
  amenities               String[]               // Tour amenities (JSON array)
  giveFacilitatorAccess   Boolean    @default(false) // Allow facilitators to apply to help
  
  // ADD THESE NEW RELATIONS:
  itinerary               ItineraryDay[]
  accommodation           Accommodation?

  @@map("tours")
}

model ItineraryDay {
  id              String   @id @default(cuid())
  tourId          String
  dayNumber       Int      // Day 1, Day 2, etc.
  todo            String   // Main activity for the day
  hotelLocation   String   // Hotel location for that day
  description     String   // Detailed description of day's activities
  arrivalTime     String   // Format: HH:MM (24-hour recommended)
  pickupTime      String   // Format: HH:MM (24-hour recommended)
  inclusive       String?  // What's included in this day (optional)
  exclusive       String?  // What's excluded from this day (optional)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tour            Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  
  @@unique([tourId, dayNumber]) // Ensure each tour has unique day numbers
  @@map("itinerary_days")
}

// 3. ADD NEW MODEL - Accommodation
model Accommodation {
  id              String   @id @default(cuid())
  tourId          String   @unique // One-to-one relationship
  hotelName       String
  hotelLocation   String
  description     String
  arrivalTime     String   // Format: HH:MM
  pickupTime      String   // Format: HH:MM
  hotelImages     String[] // Array of image URLs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tour            Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  
  @@map("accommodations")
}

model Booking {
  id              String              @id @default(cuid())
  tourId          String?
  customTourId    String?
  guestId         String
  status          BookingStatus       @default(PENDING)
  amount          Float
  currency        String              @default("USD")
  paymentStatus   String              @default("PENDING")
  paymentMethod   String?
  scheduledDate   DateTime
  participants    Int                 @default(1)
  specialRequests String?
  facilitatorId   String?
  translatorId    String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  Payment         Payment[]
  transactions    WalletTransaction[]
  guest           User                @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  tour            Tour?               @relation(fields: [tourId], references: [id], onDelete: Cascade)
  customTour      CustomTour?         @relation("CustomTourBookings", fields: [customTourId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model TourRequest {
  id              String    @id @default(cuid())
  guestId         String
  title           String
  description     String
  preferredDate   DateTime?
  budget          Float?
  location        String?
  categories      String[]
  languages       String[]
  groupSize       Int?
  specialRequests String?
  status          String    @default("OPEN")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tourId          String?
  tour            Tour?     @relation(fields: [tourId], references: [id])

  @@map("tour_requests")
}

model Review {
  id             String   @id @default(cuid())
  tourId         String
  reviewerId     String
  reviewedUserId String
  rating         Int
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviewedUser   User     @relation("ReviewedUser", fields: [reviewedUserId], references: [id], onDelete: Cascade)
  reviewer       User     @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  tour           Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, reviewerId])
  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  otp       String   @unique

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  bookingId       String?
  amount          Float
  currency        String   @default("USD")
  paymentIntentId String?
  paymentMethod   String?
  status          String   @default("PENDING")
  receiptUrl      String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  booking         Booking? @relation(fields: [bookingId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  User            User[]   @relation("PaymentHost")
  Tour            Tour[]   @relation("PaymentToTour")
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  balance      Float               @default(0)
  escrow       Float               @default(0)
  currency     String              @default("USD")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  payouts      Payout[]
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]
}

model WalletTransaction {
  id                      String                    @id @default(cuid())
  walletId                String
  amount                  Float
  currency                String                    @default("USD")
  status                  String                    @default("COMPLETED")
  reference               String?
  description             String?
  createdAt               DateTime                  @default(now())
  bookingId               String?
  netAmount               Float                     @default(0)
  payoutId                String?
  payoutStatus            PayoutStatus?             @default(AVAILABLE)
  platformFee             Float                     @default(0)
  serviceType             String?
  type                    TransactionType
  booking                 Booking?                  @relation(fields: [bookingId], references: [id])
  payoutBatch             Payout?                   @relation(fields: [payoutId], references: [id])
  wallet                  Wallet                    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  TourToWalletTransaction TourToWalletTransaction[]
}

model Payout {
  id             String              @id @default(cuid())
  userId         String
  walletId       String
  amount         Float
  currency       String              @default("USD")
  stripePayoutId String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  status         PayoutStatus        @default(PENDING)
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet         Wallet              @relation(fields: [walletId], references: [id], onDelete: Cascade)
  transactions   WalletTransaction[]
}

model PlatformTransaction {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  currency    String   @default("USD")
  stripeRef   String?
  relatedUser String?
  relatedTour String?
  description String?
  createdAt   DateTime @default(now())
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TourToWalletTransaction {
  A                 String
  B                 String
  tours             Tour              @relation(fields: [A], references: [id], onDelete: Cascade)
  WalletTransaction WalletTransaction @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_TourToWalletTransaction_AB_pkey")
  @@index([B], map: "_TourToWalletTransaction_B_index")
  @@map("_TourToWalletTransaction")
}

model CustomTour {
  id                    String                @id @default(cuid())
  guestId               String
  title                 String
  description           String
  tourType              String                // Cultural, Adventure, Food, Historical
  location              String
  country               String?
  budgetProposal        Float
  tourCategory          String                // Arts, Nature, Food, Culture
  groupSize             Int
  preferredLanguages    String[]
  startDate             DateTime?
  endDate               DateTime?
  accessibilityNotes    String?
  amenitiesNeeded       String[]
  status                CustomTourStatus      @default(PENDING)
  coverageAreas         String[]              // Where the tour should take place
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relationships
  guest                 User                  @relation("CustomTourGuest", fields: [guestId], references: [id], onDelete: Cascade)
  hostResponses         CustomTourHostResponse[]
  bookings             Booking[]             @relation("CustomTourBookings")
  
  @@map("custom_tours")
}

model CustomTourHostResponse {
  id              String                @id @default(cuid())
  customTourId    String
  hostId          String
  message         String?
  proposedPrice   Float?
  status          HostResponseStatus    @default(PENDING)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  // Relationships
  customTour      CustomTour            @relation(fields: [customTourId], references: [id], onDelete: Cascade)
  host            User                  @relation("CustomTourHostResponses", fields: [hostId], references: [id], onDelete: Cascade)
  
  @@unique([customTourId, hostId]) // One response per host per custom tour
  @@map("custom_tour_host_responses")
}

enum TransactionType {
  DEPOSIT
  EARNING
  WITHDRAWAL
  ESCROW_RELEASE
  REFUND
  FAILED
}

enum PayoutStatus {
  AVAILABLE
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum UserRole {
  GUEST
  HOST
  FACILITATOR
  TRANSLATOR
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum TourType {
  PHYSICAL
  VIRTUAL
}

enum TourStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum CustomTourStatus {
  PENDING
  NEGOTIATING
  ACCEPTED
  DECLINED
  CONFIRMED
  CANCELLED
}

enum HostResponseStatus {
  PENDING
  ACCEPTED
  DECLINED
  NEGOTIATING
}
